{"version":3,"sources":["components/TaskContext.jsx","components/Button.jsx","components/Header.jsx","components/Tasks.jsx","App.js","index.js"],"names":["TaskContext","createContext","TaskProvider","props","useState","id","text","tasks","setTasks","Provider","value","children","Button","color","onClick","useContext","nextId","length","newTask","setNewTask","onSubmit","e","preventDefault","type","name","onChange","target","prevState","className","style","backgroundColor","prevTasks","defaultProps","Header","title","Tasks","map","task","App","ReactDOM","render","document","getElementById"],"mappings":"iOAGaA,EAAcC,0BAEdC,EAAe,SAACC,GAAW,IAAD,EACTC,mBAAS,CAAC,CAAEC,GAAI,EAAGC,KAAM,eAAiB,CAAED,GAAI,EAAGC,KAAM,iBADhD,mBAC5BC,EAD4B,KACrBC,EADqB,KAEnC,OACI,cAACR,EAAYS,SAAb,CAAsBC,MAAO,CAACH,EAAOC,GAArC,SACKL,EAAMQ,YCJnB,SAASC,EAAT,GAA2C,IAAzBC,EAAwB,EAAxBA,MAAOP,EAAiB,EAAjBA,KAAiB,KAAXQ,QAGDC,qBAAWf,IAHC,mBAG/BO,EAH+B,KAGxBC,EAHwB,KAIhCQ,EAAST,EAAMU,OAAS,EAJQ,EAKRb,mBAAS,CACnCC,GAAIW,EACJV,KAAM,KAP4B,mBAK/BY,EAL+B,KAKtBC,EALsB,KAwBtC,OACI,uBAAMC,SAAU,SAACC,GACbA,EAAEC,iBACFH,EAAW,CACPd,GAAIW,EACJV,KAAM,MAJd,UAOI,uBAAOiB,KAAK,OAAOC,KAAK,OAAOd,MAAOQ,EAAQZ,KAAMmB,SAjBvC,SAACJ,GAAO,IAAD,EACAA,EAAEK,OAAlBF,EADgB,EAChBA,KAAMd,EADU,EACVA,MACdS,GAAW,SAACQ,GAAD,mBAAC,eACLA,GADI,kBAENH,EAAOd,UAcR,wBAAQkB,UAAU,MAAMC,MAAO,CAC3BC,gBAAiB,CAAEjB,UAEnBC,QAzBQ,WAChBN,GAAS,SAACuB,GAAD,4BAAmBA,GAAnB,CAA8Bb,QAqBnC,SAIEZ,OAKdM,EAAOoB,aAAe,CAClBnB,MAAO,YACPP,KAAM,OASKM,QCvDTqB,EAAS,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACd,OACI,yBAAQN,UAAU,SAAlB,UACI,6BAAKM,IACL,cAAC,EAAD,QAQZD,EAAOD,aAAe,CAClBE,MAAO,gBASID,QCdAE,EATD,WAAO,IAAD,EACGpB,qBAAWf,GADd,mBACTO,EADS,UAEhB,OACI,mCACKA,EAAM6B,KAAI,SAACC,GAAD,OAAW,+BAAmBA,EAAKhC,GAAxB,IAA6BgC,EAAK/B,OAAzB+B,EAAKhC,UCUjCiC,MAZf,WACE,OAEE,cAAC,EAAD,UACE,sBAAKV,UAAU,gBAAf,UACE,cAAC,EAAD,CAAQM,MAAM,iBACd,cAAC,EAAD,UCLRK,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.96164839.chunk.js","sourcesContent":["import React, { useState, createContext } from 'react';\n\n\nexport const TaskContext = createContext();\n\nexport const TaskProvider = (props) => {\n    const [tasks, setTasks] = useState([{ id: 1, text: \"hey idiot 1\" }, { id: 2, text: \"hey idiot 2\" }]);\n    return (\n        <TaskContext.Provider value={[tasks, setTasks]}>\n            {props.children}\n        </TaskContext.Provider>\n    );\n}","import { useContext, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { TaskContext } from './TaskContext';\n\n\nfunction Button({ color, text, onClick }) {\n\n\n    const [tasks, setTasks] = useContext(TaskContext);\n    const nextId = tasks.length + 1;\n    const [newTask, setNewTask] = useState({\n        id: nextId,\n        text: \"\"\n    })\n\n\n    const handleClick = () => {\n        setTasks((prevTasks) => [...prevTasks, newTask])\n    }\n\n    const handleChange = (e) => {\n        const { name, value } = e.target;\n        setNewTask((prevState) => ({\n            ...prevState,\n            [name]: value\n        }));\n    }\n\n\n    return (\n        <form onSubmit={(e) => {\n            e.preventDefault();\n            setNewTask({\n                id: nextId,\n                text: \"\"\n            })\n        }}>\n            <input type=\"text\" name=\"text\" value={newTask.text} onChange={handleChange} />\n            <button className=\"btn\" style={{\n                backgroundColor: { color },\n            }}\n                onClick={handleClick}\n            >{text}</button>\n        </form>\n    )\n}\n\nButton.defaultProps = {\n    color: 'steelblue',\n    text: 'Add'\n}\n\nButton.propTypes = {\n    color: PropTypes.string,\n    text: PropTypes.string,\n    onClick: PropTypes.func\n}\n\nexport default Button;","import PropTypes from 'prop-types'\nimport Button from './Button';\n\nconst Header = ({ title }) => {\n    return (\n        <header className=\"header\">\n            <h1>{title}</h1>\n            <Button />\n\n        </header>\n    )\n}\n\n\n//default props --> incase no props were passed\nHeader.defaultProps = {\n    title: \"Task Tracker\"\n}\n\n\n//set data types for props... isRequired is optional\nHeader.propTypes = {\n    title: PropTypes.string.isRequired,\n}\n\nexport default Header\n","import { useContext } from 'react';\nimport { TaskContext } from \"../components/TaskContext\";\nconst Tasks = () => {\n    const [tasks, _] = useContext(TaskContext);\n    return (\n        <>\n            {tasks.map((task) => (<h3 key={task.id}>{task.id},{task.text}</h3>))}\n        </>\n    )\n}\n\nexport default Tasks\n","import Header from \"./components/Header\";\nimport { TaskProvider } from \"./components/TaskContext\";\nimport Tasks from \"./components/Tasks\";\n\nfunction App() {\n  return (\n\n    <TaskProvider>\n      <div className=\"App container\">\n        <Header title=\"Task Tracker\" />\n        <Tasks />\n      </div>\n    </TaskProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}